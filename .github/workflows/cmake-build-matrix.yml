# Syntax:
# https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions
#
# Contexts:
# https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs

name: CMake Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  LS_QT_VERSION: 6.7.2

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - preset: win-msvc-debug
            os: windows-2022
          - preset: win-clang-debug
            os: windows-2022
          - preset: linux-gcc-debug
            os: ubuntu-24.04
          - preset: linux-clang-debug
            os: ubuntu-24.04
            system_qt: true

    env:
      # ask apt-get to never interact
      DEBIAN_FRONTEND: noninteractive
      # set default platform plugin for qt so the executables can run
      QT_QPA_PLATFORM: offscreen

    steps:


    - name: Git Clone
      run: >
        git clone --depth 1 
        --branch ${{ github.ref_name }} 
        https://github.com/${{ github.repository }}.git 
        ${{ github.workspace }}

    
    # - uses: actions/checkout@v4
    #  with:
    #    submodules: recursive

    # required so cmake finds MSVC compiler
    - uses: ilammy/msvc-dev-cmd@v1
    
    - uses: seanmiddleditch/gha-setup-ninja@v5

    - name: Set up Python 3.11
      if: runner.os == 'Windows'
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'





    - name: Submodule Hash
      working-directory: ${{ github.workspace }}
      run: |
        git submodule status > submodule_hashes.txt
        cat submodule_hashes.txt
    - name: Restore Submodule
      id: cache-submodule-restore
      uses: actions/cache/restore@v4
      with:
        # path: .git/modules
        path: external/*/
        key: ${{ matrix.os }}-submodule-${{ hashFiles('submodule_hashes.txt') }}-2
    - name: Refresh Submodule
      working-directory: ${{ github.workspace }}
      run: |
        python3 external/checkout.py
    - name: Cache Submodule
      if: steps.cache-submodule-restore.outputs.cache-hit != 'true'
      uses: actions/cache/save@v4
      with:
        # path: .git/modules
        path: external/*/
        key: ${{ steps.cache-submodule-restore.outputs.cache-primary-key }}







    # - name: Refresh Submodule
    #   working-directory: ${{ github.workspace }}
    #   run: |
    #     python3 external/checkout.py

    - name: Install Latest Qt
      if: ${{ ! matrix.system_qt }}
      uses: jurplel/install-qt-action@v4
      with: 
        version: ${{ env.LS_QT_VERSION }}
        archives: 'icu qtbase qtsvg'
        cache-key-prefix: install-qt-action-v4-${{ env.LS_QT_VERSION }}-${{ matrix.os }}-icu-qtbase-qtsvg
        cache: true
        
    - name: Install System Qt
      if: runner.os == 'Linux' && matrix.system_qt
      run: |
        sudo apt-get update
        sudo apt-get install --yes --no-install-suggests \
            qt6-base-dev libqt6svg6 qt6-base-private-dev

    - name: Variables
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build/${{ matrix.preset }}" >> "$GITHUB_OUTPUT"
    
    - name: Configure CMake
      working-directory: ${{ github.workspace }}
      run: |
        cmake --version
        cmake --preset ${{ matrix.preset }}

    # - name: Build
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   run: |
    #     ninja -v

    # - name: Test Linux
    #   if: runner.os == 'Linux'
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   run: |
    #     ./simulation_srp_test
    
    # - name: Test Windows
    #   if: runner.os == 'Windows'
    #   working-directory: ${{ steps.strings.outputs.build-output-dir }}
    #   run: |
    #     ./simulation_srp_test.exe
